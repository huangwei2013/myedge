// Code generated by protoc-gen-go. DO NOT EDIT.
// source: data.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DataRequest struct {
	Id                   string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mid                  int64         `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	Records              []*DataRecord `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DataRequest) Reset()         { *m = DataRequest{} }
func (m *DataRequest) String() string { return proto.CompactTextString(m) }
func (*DataRequest) ProtoMessage()    {}
func (*DataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{0}
}

func (m *DataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataRequest.Unmarshal(m, b)
}
func (m *DataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataRequest.Marshal(b, m, deterministic)
}
func (m *DataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataRequest.Merge(m, src)
}
func (m *DataRequest) XXX_Size() int {
	return xxx_messageInfo_DataRequest.Size(m)
}
func (m *DataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DataRequest proto.InternalMessageInfo

func (m *DataRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DataRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *DataRequest) GetRecords() []*DataRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type DataReply struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	NextMid              int64    `protobuf:"varint,3,opt,name=next_mid,json=nextMid,proto3" json:"next_mid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataReply) Reset()         { *m = DataReply{} }
func (m *DataReply) String() string { return proto.CompactTextString(m) }
func (*DataReply) ProtoMessage()    {}
func (*DataReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{1}
}

func (m *DataReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataReply.Unmarshal(m, b)
}
func (m *DataReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataReply.Marshal(b, m, deterministic)
}
func (m *DataReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataReply.Merge(m, src)
}
func (m *DataReply) XXX_Size() int {
	return xxx_messageInfo_DataReply.Size(m)
}
func (m *DataReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DataReply.DiscardUnknown(m)
}

var xxx_messageInfo_DataReply proto.InternalMessageInfo

func (m *DataReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DataReply) GetNextMid() int64 {
	if m != nil {
		return m.NextMid
	}
	return 0
}

type DataRecord struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Msg                  []byte   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataRecord) Reset()         { *m = DataRecord{} }
func (m *DataRecord) String() string { return proto.CompactTextString(m) }
func (*DataRecord) ProtoMessage()    {}
func (*DataRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{2}
}

func (m *DataRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataRecord.Unmarshal(m, b)
}
func (m *DataRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataRecord.Marshal(b, m, deterministic)
}
func (m *DataRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataRecord.Merge(m, src)
}
func (m *DataRecord) XXX_Size() int {
	return xxx_messageInfo_DataRecord.Size(m)
}
func (m *DataRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DataRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DataRecord proto.InternalMessageInfo

func (m *DataRecord) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *DataRecord) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type StreamDataRequest struct {
	Id                   string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Records              []*StreamDataRecord `protobuf:"bytes,2,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *StreamDataRequest) Reset()         { *m = StreamDataRequest{} }
func (m *StreamDataRequest) String() string { return proto.CompactTextString(m) }
func (*StreamDataRequest) ProtoMessage()    {}
func (*StreamDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{3}
}

func (m *StreamDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamDataRequest.Unmarshal(m, b)
}
func (m *StreamDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamDataRequest.Marshal(b, m, deterministic)
}
func (m *StreamDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamDataRequest.Merge(m, src)
}
func (m *StreamDataRequest) XXX_Size() int {
	return xxx_messageInfo_StreamDataRequest.Size(m)
}
func (m *StreamDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamDataRequest proto.InternalMessageInfo

func (m *StreamDataRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StreamDataRequest) GetRecords() []*StreamDataRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type StreamDataReply struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	NextMid              int64    `protobuf:"varint,2,opt,name=next_mid,json=nextMid,proto3" json:"next_mid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamDataReply) Reset()         { *m = StreamDataReply{} }
func (m *StreamDataReply) String() string { return proto.CompactTextString(m) }
func (*StreamDataReply) ProtoMessage()    {}
func (*StreamDataReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{4}
}

func (m *StreamDataReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamDataReply.Unmarshal(m, b)
}
func (m *StreamDataReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamDataReply.Marshal(b, m, deterministic)
}
func (m *StreamDataReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamDataReply.Merge(m, src)
}
func (m *StreamDataReply) XXX_Size() int {
	return xxx_messageInfo_StreamDataReply.Size(m)
}
func (m *StreamDataReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamDataReply.DiscardUnknown(m)
}

var xxx_messageInfo_StreamDataReply proto.InternalMessageInfo

func (m *StreamDataReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *StreamDataReply) GetNextMid() int64 {
	if m != nil {
		return m.NextMid
	}
	return 0
}

type StreamDataRecord struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Msg                  []byte   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamDataRecord) Reset()         { *m = StreamDataRecord{} }
func (m *StreamDataRecord) String() string { return proto.CompactTextString(m) }
func (*StreamDataRecord) ProtoMessage()    {}
func (*StreamDataRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{5}
}

func (m *StreamDataRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamDataRecord.Unmarshal(m, b)
}
func (m *StreamDataRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamDataRecord.Marshal(b, m, deterministic)
}
func (m *StreamDataRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamDataRecord.Merge(m, src)
}
func (m *StreamDataRecord) XXX_Size() int {
	return xxx_messageInfo_StreamDataRecord.Size(m)
}
func (m *StreamDataRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamDataRecord.DiscardUnknown(m)
}

var xxx_messageInfo_StreamDataRecord proto.InternalMessageInfo

func (m *StreamDataRecord) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *StreamDataRecord) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func init() {
	proto.RegisterType((*DataRequest)(nil), "service.DataRequest")
	proto.RegisterType((*DataReply)(nil), "service.DataReply")
	proto.RegisterType((*DataRecord)(nil), "service.DataRecord")
	proto.RegisterType((*StreamDataRequest)(nil), "service.StreamDataRequest")
	proto.RegisterType((*StreamDataReply)(nil), "service.StreamDataReply")
	proto.RegisterType((*StreamDataRecord)(nil), "service.StreamDataRecord")
}

func init() { proto.RegisterFile("data.proto", fileDescriptor_871986018790d2fd) }

var fileDescriptor_871986018790d2fd = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x4d, 0x4f, 0xf2, 0x40,
	0x10, 0x80, 0xdf, 0xdd, 0xf2, 0xf2, 0x31, 0xa8, 0xe0, 0xe8, 0xa1, 0x70, 0x22, 0x3d, 0xf5, 0x62,
	0x43, 0x4a, 0xc2, 0x41, 0x2f, 0x06, 0xbc, 0x78, 0xe0, 0xb2, 0xbd, 0x18, 0x0f, 0x9a, 0xd2, 0xdd,
	0x90, 0x4d, 0x80, 0xd6, 0x76, 0x25, 0xf2, 0x7b, 0xfc, 0xa3, 0x66, 0xb7, 0xd4, 0x42, 0x43, 0x0c,
	0xd1, 0xdb, 0x7c, 0x74, 0x9e, 0x99, 0xa7, 0x59, 0x00, 0x1e, 0xaa, 0xd0, 0x4b, 0xd2, 0x58, 0xc5,
	0xd8, 0xc8, 0x44, 0xba, 0x91, 0x91, 0x70, 0x5e, 0xa0, 0xfd, 0x10, 0xaa, 0x90, 0x89, 0xb7, 0x77,
	0x91, 0x29, 0xbc, 0x00, 0x2a, 0xb9, 0x4d, 0x06, 0xc4, 0x6d, 0x31, 0x2a, 0x39, 0x76, 0xc1, 0x5a,
	0x49, 0x6e, 0xd3, 0x01, 0x71, 0x2d, 0xa6, 0x43, 0xbc, 0x81, 0x46, 0x2a, 0xa2, 0x38, 0xe5, 0x99,
	0x6d, 0x0d, 0x2c, 0xb7, 0xed, 0x5f, 0x79, 0x3b, 0x96, 0x97, 0x83, 0x74, 0x8f, 0x15, 0xdf, 0x38,
	0xb7, 0xd0, 0xca, 0xcb, 0xc9, 0x72, 0x8b, 0x08, 0xb5, 0x28, 0xe6, 0xc2, 0xf0, 0xff, 0x33, 0x13,
	0x63, 0x0f, 0x9a, 0x6b, 0xf1, 0xa1, 0x5e, 0xf5, 0x1a, 0xcb, 0xac, 0x69, 0xe8, 0x7c, 0x26, 0xb9,
	0x33, 0x04, 0x28, 0x91, 0xc5, 0x29, 0xa4, 0x3c, 0x45, 0x57, 0xb2, 0x85, 0x39, 0xee, 0x8c, 0xe9,
	0xd0, 0x79, 0x82, 0xcb, 0x40, 0xa5, 0x22, 0x5c, 0xfd, 0xe4, 0x34, 0x2a, 0x0d, 0xa8, 0x31, 0xe8,
	0x7d, 0x1b, 0xec, 0x0f, 0x1f, 0x7a, 0xdc, 0x43, 0x67, 0xbf, 0x79, 0x8a, 0x0d, 0x3d, 0xb4, 0x19,
	0x43, 0xb7, 0x8a, 0x3f, 0xc5, 0xc9, 0xff, 0xa4, 0x50, 0xd3, 0x23, 0x38, 0x86, 0xe6, 0x6e, 0x74,
	0x83, 0xd7, 0x95, 0x9f, 0x6e, 0x4c, 0xfb, 0x58, 0xa9, 0x26, 0xcb, 0xad, 0xf3, 0x0f, 0x1f, 0xe1,
	0x5c, 0xa7, 0x53, 0x3f, 0xc8, 0xf7, 0x63, 0xff, 0xa8, 0x6f, 0x8e, 0xb0, 0x8f, 0xf6, 0x0c, 0x68,
	0x48, 0x0a, 0x54, 0xe0, 0x4f, 0xff, 0x86, 0x72, 0x09, 0xce, 0xa0, 0xa3, 0x0b, 0x13, 0x99, 0x37,
	0xe5, 0x7a, 0xf1, 0x7b, 0xd8, 0x90, 0x4c, 0xea, 0xcf, 0x35, 0xef, 0x2e, 0x99, 0xcf, 0xeb, 0xe6,
	0x7d, 0x8f, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x51, 0x77, 0x94, 0x0d, 0xed, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DataClient is the client API for Data service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataClient interface {
	DataRecv(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataReply, error)
	// 客户端-->服务端流式响应
	DataC2SStream(ctx context.Context, in *StreamDataRequest, opts ...grpc.CallOption) (Data_DataC2SStreamClient, error)
	// 服务端-->客户端流式请求
	DataS2CStream(ctx context.Context, opts ...grpc.CallOption) (Data_DataS2CStreamClient, error)
	// 双向流式
	DataBiStreaming(ctx context.Context, opts ...grpc.CallOption) (Data_DataBiStreamingClient, error)
}

type dataClient struct {
	cc *grpc.ClientConn
}

func NewDataClient(cc *grpc.ClientConn) DataClient {
	return &dataClient{cc}
}

func (c *dataClient) DataRecv(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataReply, error) {
	out := new(DataReply)
	err := c.cc.Invoke(ctx, "/service.Data/DataRecv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DataC2SStream(ctx context.Context, in *StreamDataRequest, opts ...grpc.CallOption) (Data_DataC2SStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Data_serviceDesc.Streams[0], "/service.Data/DataC2SStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataDataC2SStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Data_DataC2SStreamClient interface {
	Recv() (*StreamDataReply, error)
	grpc.ClientStream
}

type dataDataC2SStreamClient struct {
	grpc.ClientStream
}

func (x *dataDataC2SStreamClient) Recv() (*StreamDataReply, error) {
	m := new(StreamDataReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataClient) DataS2CStream(ctx context.Context, opts ...grpc.CallOption) (Data_DataS2CStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Data_serviceDesc.Streams[1], "/service.Data/DataS2CStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataDataS2CStreamClient{stream}
	return x, nil
}

type Data_DataS2CStreamClient interface {
	Send(*StreamDataRequest) error
	CloseAndRecv() (*StreamDataReply, error)
	grpc.ClientStream
}

type dataDataS2CStreamClient struct {
	grpc.ClientStream
}

func (x *dataDataS2CStreamClient) Send(m *StreamDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataDataS2CStreamClient) CloseAndRecv() (*StreamDataReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamDataReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataClient) DataBiStreaming(ctx context.Context, opts ...grpc.CallOption) (Data_DataBiStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Data_serviceDesc.Streams[2], "/service.Data/DataBiStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataDataBiStreamingClient{stream}
	return x, nil
}

type Data_DataBiStreamingClient interface {
	Send(*StreamDataRequest) error
	Recv() (*StreamDataReply, error)
	grpc.ClientStream
}

type dataDataBiStreamingClient struct {
	grpc.ClientStream
}

func (x *dataDataBiStreamingClient) Send(m *StreamDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataDataBiStreamingClient) Recv() (*StreamDataReply, error) {
	m := new(StreamDataReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataServer is the server API for Data service.
type DataServer interface {
	DataRecv(context.Context, *DataRequest) (*DataReply, error)
	// 客户端-->服务端流式响应
	DataC2SStream(*StreamDataRequest, Data_DataC2SStreamServer) error
	// 服务端-->客户端流式请求
	DataS2CStream(Data_DataS2CStreamServer) error
	// 双向流式
	DataBiStreaming(Data_DataBiStreamingServer) error
}

// UnimplementedDataServer can be embedded to have forward compatible implementations.
type UnimplementedDataServer struct {
}

func (*UnimplementedDataServer) DataRecv(ctx context.Context, req *DataRequest) (*DataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataRecv not implemented")
}
func (*UnimplementedDataServer) DataC2SStream(req *StreamDataRequest, srv Data_DataC2SStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DataC2SStream not implemented")
}
func (*UnimplementedDataServer) DataS2CStream(srv Data_DataS2CStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DataS2CStream not implemented")
}
func (*UnimplementedDataServer) DataBiStreaming(srv Data_DataBiStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method DataBiStreaming not implemented")
}

func RegisterDataServer(s *grpc.Server, srv DataServer) {
	s.RegisterService(&_Data_serviceDesc, srv)
}

func _Data_DataRecv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DataRecv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Data/DataRecv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DataRecv(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DataC2SStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServer).DataC2SStream(m, &dataDataC2SStreamServer{stream})
}

type Data_DataC2SStreamServer interface {
	Send(*StreamDataReply) error
	grpc.ServerStream
}

type dataDataC2SStreamServer struct {
	grpc.ServerStream
}

func (x *dataDataC2SStreamServer) Send(m *StreamDataReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Data_DataS2CStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataServer).DataS2CStream(&dataDataS2CStreamServer{stream})
}

type Data_DataS2CStreamServer interface {
	SendAndClose(*StreamDataReply) error
	Recv() (*StreamDataRequest, error)
	grpc.ServerStream
}

type dataDataS2CStreamServer struct {
	grpc.ServerStream
}

func (x *dataDataS2CStreamServer) SendAndClose(m *StreamDataReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataDataS2CStreamServer) Recv() (*StreamDataRequest, error) {
	m := new(StreamDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Data_DataBiStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataServer).DataBiStreaming(&dataDataBiStreamingServer{stream})
}

type Data_DataBiStreamingServer interface {
	Send(*StreamDataReply) error
	Recv() (*StreamDataRequest, error)
	grpc.ServerStream
}

type dataDataBiStreamingServer struct {
	grpc.ServerStream
}

func (x *dataDataBiStreamingServer) Send(m *StreamDataReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataDataBiStreamingServer) Recv() (*StreamDataRequest, error) {
	m := new(StreamDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Data_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.Data",
	HandlerType: (*DataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DataRecv",
			Handler:    _Data_DataRecv_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DataC2SStream",
			Handler:       _Data_DataC2SStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DataS2CStream",
			Handler:       _Data_DataS2CStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DataBiStreaming",
			Handler:       _Data_DataBiStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "data.proto",
}
